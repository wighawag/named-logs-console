import{hook}from"named-logs";const noop=()=>{},oldConsole=window.console,disabledRegexps=[],enabledRegexps=[];function bindCall(e,l,o,s){return l.enabled&&(l.level>=s||logs.level>=s)?o<=s||logs.traceLevel<=s?oldConsole.trace.bind(oldConsole):e.bind(oldConsole):noop}const loggers={};export const logs=e=>{let l=loggers[e];if(l)return l;let o=logs.level,s=logs.traceLevel;return l=loggers[e]={get assert(){return bindCall(oldConsole.assert,l,s,1)},get error(){return bindCall(oldConsole.error,l,s,1)},get warn(){return bindCall(oldConsole.warn,l,s,2)},get info(){return bindCall(oldConsole.info,l,s,3)},get log(){return bindCall(oldConsole.log,l,s,4)},get debug(){return bindCall(oldConsole.debug,l,s,5)},get trace(){return bindCall(oldConsole.trace,l,s,6)},get dir(){return bindCall(oldConsole.dir,l,s,5)},get table(){return bindCall(oldConsole.table||oldConsole.debug,l,s,5)},get level(){return o},set level(e){o=e},get traceLevel(){return s},set traceLevel(e){s=e},enabled:enabled(e,{disabledRegexps:disabledRegexps,enabledRegexps:enabledRegexps})}};const logLevels={error:1,warn:2,info:3,log:4,debug:5,trace:6};function enabled(e,{disabledRegexps:l,enabledRegexps:o}){if("*"===e[e.length-1])return!0;let s,n;for(s=0,n=l.length;s<n;s++)if(l[s].test(e))return!1;for(s=0,n=o.length;s<n;s++)if(o[s].test(e))return!0;return!1}function process(e,{disabledRegexps:l,enabledRegexps:o},s){const n=("string"==typeof e?e:"").split(/[\s,]+/),t=n.length;for(let s=0;s<t;s++)n[s]&&("-"===(e=n[s].replace(/\*/g,".*?"))[0]?l.push(new RegExp("^"+e.substr(1)+"$")):o.push(new RegExp("^"+e+"$")));for(const e of Object.keys(loggers))s(e,enabled(e,{disabledRegexps:l,enabledRegexps:o}))}logs.level=2,logs.traceLevel=6,logs.setTraceLevelFor=(e,l)=>{process(e||"*",{disabledRegexps:[],enabledRegexps:[]},(e,o)=>{o&&(loggers[e].traceLevel=l)})},logs.disable=()=>{disabledRegexps.splice(0,disabledRegexps.length),enabledRegexps.splice(0,enabledRegexps.length);for(const e of Object.keys(loggers))loggers[e].enabled=!1;try{localStorage.removeItem("debug")}catch(e){}},logs.enable=e=>{disabledRegexps.splice(0,disabledRegexps.length),enabledRegexps.splice(0,enabledRegexps.length),process(e=""===e?"*":e||"*",{disabledRegexps:disabledRegexps,enabledRegexps:enabledRegexps},(e,l)=>loggers[e].enabled=l);try{localStorage.setItem("debug",e)}catch(e){}};export function replaceConsole(e="console"){const l=logs(e);return window.console=Object.assign(Object.assign({},l),{clear:oldConsole.clear.bind(oldConsole),count:noop,countReset:noop,dirxml:noop,exception:noop,group:noop,groupCollapsed:noop,groupEnd:noop,time:noop,timeEnd:noop,timeLog:noop,timeStamp:noop,profile:noop,profileEnd:noop}),oldConsole}export function hookup(){hook(logs)}try{const e=localStorage.getItem("debug");e&&""!==e&&logs.enable(e)}catch(e){}const vars=location.search.slice(1).split("&");for(const e of vars)if(e.startsWith("debug=")){const l=e.slice(6);""===l?logs.disable():logs.enable(l)}else if(e.startsWith("log=")){const l=e.slice(4);logs.level=logLevels[l]||parseInt(l)||logs.level}else if(e.startsWith("trace=")){const l=e.slice(6);logs.traceLevel=logLevels[l]||parseInt(l)||logs.level}